[{"F:\\CodingBootcamp\\Mug-Store\\client\\src\\index.js":"1","F:\\CodingBootcamp\\Mug-Store\\client\\src\\App.js":"2","F:\\CodingBootcamp\\Mug-Store\\client\\src\\reportWebVitals.js":"3","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\GlobalState.js":"4","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\auth.js":"5","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Signup.js":"6","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Login.js":"7","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Create.js":"8","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Success.js":"9","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Home.js":"10","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\OrderHistory.js":"11","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UserDashboard.js":"12","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\About.js":"13","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UpdateUser.js":"14","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Nav.js":"15","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\mutations.js":"16","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\reducers.js":"17","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\helpers.js":"18","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Cart\\index.js":"19","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\queries.js":"20","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomizeProduct.js":"21","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\PrevOrder.js":"22","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\UserInfo.js":"23","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\actions.js":"24","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CartItem.js":"25","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomMug.js":"26"},{"size":570,"mtime":1669389001013,"results":"27","hashOfConfig":"28"},{"size":2217,"mtime":1669660312632,"results":"29","hashOfConfig":"28"},{"size":375,"mtime":1669229350274,"results":"30","hashOfConfig":"28"},{"size":542,"mtime":1669651326511,"results":"31","hashOfConfig":"28"},{"size":1458,"mtime":1669651326512,"results":"32","hashOfConfig":"28"},{"size":4924,"mtime":1669651326505,"results":"33","hashOfConfig":"28"},{"size":2281,"mtime":1669651326502,"results":"34","hashOfConfig":"28"},{"size":445,"mtime":1669651326501,"results":"35","hashOfConfig":"28"},{"size":1450,"mtime":1669651326507,"results":"36","hashOfConfig":"28"},{"size":688,"mtime":1669660088963,"results":"37","hashOfConfig":"28"},{"size":1534,"mtime":1669660088964,"results":"38","hashOfConfig":"28"},{"size":1583,"mtime":1669660088967,"results":"39","hashOfConfig":"28"},{"size":2107,"mtime":1669660088962,"results":"40","hashOfConfig":"28"},{"size":5711,"mtime":1669660088966,"results":"41","hashOfConfig":"28"},{"size":2064,"mtime":1669660088959,"results":"42","hashOfConfig":"28"},{"size":2120,"mtime":1669660088971,"results":"43","hashOfConfig":"28"},{"size":1597,"mtime":1669315339706,"results":"44","hashOfConfig":"28"},{"size":2235,"mtime":1669660088970,"results":"45","hashOfConfig":"28"},{"size":2883,"mtime":1669660483884,"results":"46","hashOfConfig":"28"},{"size":1036,"mtime":1669658382932,"results":"47","hashOfConfig":"28"},{"size":9389,"mtime":1669660088957,"results":"48","hashOfConfig":"28"},{"size":1243,"mtime":1669652090066,"results":"49","hashOfConfig":"28"},{"size":1022,"mtime":1669660088960,"results":"50","hashOfConfig":"28"},{"size":479,"mtime":1669305170537,"results":"51","hashOfConfig":"28"},{"size":2294,"mtime":1669660088954,"results":"52","hashOfConfig":"28"},{"size":1326,"mtime":1669660088956,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"1dxhbal",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},"F:\\CodingBootcamp\\Mug-Store\\client\\src\\index.js",["112"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",["113","114"],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\App.js",["115"],"import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n// import background from \"./assets/background.jpg\";\r\nimport './App.css';\r\nimport Auth from './utils/auth';\r\n\r\nimport { StoreProvider } from './utils/GlobalState';\r\n\r\nimport Nav from './components/Nav';\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport UserDashboard from './pages/UserDashboard';\r\nimport Create from './pages/Create';\r\nimport Success from './pages/Success';\r\nimport OrderHistory from './pages/OrderHistory';\r\nimport About from './pages/About';\r\nimport Cart from './components/Cart';\r\n\r\nimport UpdateUser from './pages/UpdateUser';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n// import UserDashboard from './pages/UserDashboard';\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <div className=\"App\">\r\n        <StoreProvider>\r\n          <Router>\r\n            <Nav />\r\n            {Auth.loggedIn() ? <Cart /> : ''}\r\n            <Routes>\r\n              <Route path=\"/\" element={<About />} />\r\n              <Route path=\"/login\" element={<Login />} />\r\n              <Route path=\"/signup\" element={<Signup />} />\r\n              <Route path=\"/profile\" element={<UserDashboard />} />\r\n              <Route path=\"/create\" element={<Create />} />\r\n              <Route path=\"/success\" element={<Success />} />\r\n              <Route path=\"/updateuser\" element={<UpdateUser />} />\r\n              <Route path=\"/orderHistory\" element={<OrderHistory />} />\r\n            </Routes>\r\n          </Router>\r\n        </StoreProvider>\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\reportWebVitals.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\GlobalState.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\auth.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Signup.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Login.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Create.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Success.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Home.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\OrderHistory.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UserDashboard.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\About.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UpdateUser.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Nav.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\mutations.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\reducers.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\helpers.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Cart\\index.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\queries.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomizeProduct.js",["116","117"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_PRODUCT } from \"../utils/mutations\";\r\nimport { validateCustomText, pluralize } from \"../utils/helpers\";\r\nimport CustomMug from \"../components/CustomMug\";\r\nimport { CirclePicker } from \"react-color\";\r\n\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../utils/actions\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nfunction AreProductsSame(product1, product2) {\r\n  console.log(\"product one:\", product1, \"product two\", product2);\r\n  if (\r\n    product1 &&\r\n    product2 &&\r\n    product1.mugColor === product2.mugColor &&\r\n    product1.customizedColor === product2.customizedColor &&\r\n    product1.customText === product2.customText &&\r\n    product1.customFont === product2.customFont\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction CustomizeProduct(item) {\r\n  const [blockPickerColor, setBlockPickerColor] = useState(\"black\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [confirmationMessage, setconfirmationMessage] = useState(\"\");\r\n\r\n  const [newProduct, setNewProduct] = useState({\r\n    mugColor: \"White\",\r\n    customizedColor: \"\",\r\n    customText: \"\",\r\n    customFont: \"Trebuchet MS\",\r\n    count: \"\",\r\n  });\r\n\r\n  const [addProduct, { error }] = useMutation(ADD_PRODUCT);\r\n  const [mugText, setMugText] = useState(\"\");\r\n  const [mugSrc, setMugSrc] = useState(\"\");\r\n  const [mugFont, setMugFont] = useState(\"\");\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n  const [newButton, setNewButton] = useState(\"\");\r\n\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { cart } = state;\r\n\r\n  const addToCart = async (product) => {\r\n    const itemInCart = cart.find((cartItem) => {\r\n      return AreProductsSame(cartItem, product);\r\n    });\r\n    dispatch({\r\n      type: ADD_TO_CART,\r\n      product: { ...product },\r\n    });\r\n    idbPromise('cart', 'put', { ...product });\r\n\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"mugColor\") {\r\n      setNewProduct({ ...newProduct, [name]: value });\r\n      setconfirmationMessage(\"\");\r\n      setMugSrc(value);\r\n    } else if (name === \"customText\") {\r\n      if (validateCustomText(value)) {\r\n        setNewProduct({ ...newProduct, [name]: value });\r\n        setMugText(value);\r\n        setCharacterCount(value.length);\r\n      }\r\n    } else if (name === \"customFont\") {\r\n      setNewProduct({ ...newProduct, [name]: value });\r\n      setMugFont(value);\r\n    } else if (name === \"count\") {\r\n      setNewProduct({ ...newProduct, [name]: parseInt(value) });\r\n    } else {\r\n      setNewProduct({ ...newProduct, customizedColor: blockPickerColor });\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      !newProduct.customText ||\r\n      !newProduct.customizedColor ||\r\n      !newProduct.count\r\n    ) {\r\n      setErrorMessage(\r\n        \"Something is missing. Please review and make sure your custom choices have been selected\"\r\n      );\r\n    } else {\r\n      try {\r\n        const { data } = await addProduct({\r\n          variables: { ...newProduct },\r\n        });\r\n        setNewButton(\" Create a new mug\");\r\n        setconfirmationMessage(\r\n          `${newProduct.count} ${pluralize(\r\n            \"mug\",\r\n            newProduct.count\r\n          )} added to cart.`\r\n        );\r\n\r\n        addToCart(data.addProduct);\r\n        let mugselector = document.getElementById('mugselector');\r\n        let fontselector = document.getElementById('fontselector');\r\n        fontselector.value = 'Trebuchet MS';\r\n        mugselector.value = 'white';\r\n        setBlockPickerColor('black');\r\n        setMugSrc('');\r\n        setMugFont('Trebuchet MS');\r\n        setMugText('');\r\n        setErrorMessage('');\r\n        setCharacterCount('0');\r\n        setNewProduct({\r\n          mugColor: \"white\",\r\n          customizedColor: \"\",\r\n          customText: \"\",\r\n          customFont: \"\",\r\n          count: \"\",\r\n        });\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const clearConfirmation = (event) => {\r\n    event.preventDefault();\r\n\r\n    setconfirmationMessage(\"\");\r\n    setNewButton(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h3>customize your creation</h3>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-md-5\">\r\n            <form onSubmit={handleFormSubmit} autoComplete=\"off\">\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleFormControlSelect1\">\r\n                  *Pick your mug color (white/black):\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  name=\"mugColor\"\r\n                  id=\"mugselector\"\r\n                  onChange={handleChange}\r\n                  defaultValue=\"1\"\r\n                >\r\n                  <option value=\"white\">White</option>\r\n                  <option value=\"black\">Black</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleInputEmail1\">\r\n                  *Your custom message:\r\n                </label>\r\n                <input\r\n                  name=\"customText\"\r\n                  placeholder=\"I love coffee & tea\"\r\n                  value={newProduct.customText}\r\n                  type=\"text\"\r\n                  className={`form-control ${\r\n                    characterCount === 26 || error ? \"text-danger \" : \"\"\r\n                  }`}\r\n                  onChange={handleChange}\r\n                />\r\n                <small\r\n                  className={`d-flex justify-content-end ${\r\n                    characterCount === 25 || error ? \"text-danger\" : \"\"\r\n                  }`}\r\n                >\r\n                  max character count: {characterCount}/25\r\n                </small>\r\n              </div>\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleInputEmail1\">\r\n                  *Select a text colour:\r\n                </label>\r\n                <CirclePicker\r\n                  className=\"pt-3 w-100\"\r\n                  name=\"customizedColor\"\r\n                  color={blockPickerColor}\r\n                  onChange={(color) => {\r\n                    setBlockPickerColor(color.hex);\r\n                    setNewProduct({\r\n                      ...newProduct,\r\n                      customizedColor: color.hex,\r\n                    });\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleInputEmail1\">*Select A Font:</label>\r\n                <select\r\n                  id=\"fontselector\"\r\n                  name=\"customFont\"\r\n                  className=\"form-control\"\r\n                  onChange={handleChange}\r\n                  defaultValue=\"1\"\r\n                >\r\n                  <option>Trebuchet MS</option>\r\n                  <option>Amatic SC</option>\r\n                  <option>Bungee Outline</option>\r\n                  <option>Cinzel</option>\r\n                  <option>Cutive Mono</option>\r\n                  <option>Eater</option>\r\n                  <option>Erica One</option>\r\n                  <option>Manrope</option>\r\n                  <option>Monoton</option>\r\n                  <option>Pacifico</option>\r\n                </select>\r\n              </div>\r\n              <div className=\" d-flex flex-row my-2 align-items-end\">\r\n                <div className=\"form-group mt-3\">\r\n                  <label htmlFor=\"exampleInputEmail1\">*Select quantity:</label>\r\n\r\n                  <input\r\n                    className=\"form-control\"\r\n                    placeholder=\"quantity\"\r\n                    value={newProduct.count}\r\n                    name=\"count\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    onChange={handleChange}\r\n                  ></input>\r\n                </div>\r\n                <div>\r\n                  <button className=\"btn btn-primary mx-2\" type=\"submit\">\r\n                    add to cart\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-danger font-italic\">{errorMessage}</p>\r\n                <span>{confirmationMessage}</span>\r\n                <span\r\n                  role=\"button\"\r\n                  className=\"text-primary\"\r\n                  onClick={clearConfirmation}\r\n                >\r\n                  {newButton}\r\n                </span>\r\n              </div>\r\n              {error && (\r\n                <div className=\"text-danger\">\r\n                  Something went wrong. To place an order, make sure you are\r\n                  <Link to=\"/login\"> logged in.</Link>\r\n                </div>\r\n              )}\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-7\">\r\n            <CustomMug\r\n              mugText={mugText}\r\n              mugSrc={mugSrc}\r\n              color={blockPickerColor}\r\n              font={mugFont}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomizeProduct;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\PrevOrder.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\UserInfo.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\actions.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CartItem.js",["118","119"],"import React, { useEffect } from \"react\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../utils/actions\"; //import correct mutations\r\nimport { idbPromise, pluralize } from \"../utils/helpers\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledItem = styled.div`\r\n  border-bottom: 1px solid grey;\r\n  padding: 1.25rem;\r\n  line-height: 2rem;\r\n`;\r\nconst Remove = styled.span`\r\n  color: lightgrey;\r\n  &:hover {\r\n    color: grey;\r\n  }\r\n`;\r\nconst ItemTitle = styled.span`\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst CartItem = ({ item }) => {\r\n  const color = item.customizedColor;\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = (item) => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id,\r\n    });\r\n    idbPromise(\"cart\", \"delete\", { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n    if (value === \"0\") {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id,\r\n      });\r\n      idbPromise(\"cart\", \"delete\", { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value),\r\n      });\r\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <StyledItem key={item._id}>\r\n        <div className=\"d-flex flex-row justify-content-between\">\r\n          <ItemTitle>\r\n            {item.count} {item.mugColor} custom {pluralize(\"mug\", item.count)}\r\n          </ItemTitle>{\" \"}\r\n          <Remove\r\n            role=\"button\"\r\n            aria-label=\"remove\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n          </Remove>\r\n        </div>\r\n\r\n        <div className=\"d-flex flex-row\">\r\n          <div>\r\n            custom text:{\" \"}\r\n            <span style={{ color: color, fontStyle: \"italic\" }}>\r\n              {item.customText}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-end\">\r\n          <p>order total: $ {item.price}</p>\r\n        </div>\r\n      </StyledItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomMug.js",["120","121"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./TextOverlay.css\";\r\nimport WhiteMug from \"../assets/whitemug.jpg\";\r\nimport BlackMug from \"../assets/blackmug.jpg\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Overlay = styled\r\nconst StyledOverlay = styled.p`\r\n  display: inline-block;\r\n  flex-wrap: wrap;\r\n  font-size: 2.7rem;\r\n  word-wrap: break-word;\r\n  text-align: center;\r\n  max-width: 400px;\r\n  position: absolute;\r\n  margin-bottom: 0px;\r\n  top: 25%;\r\n  left: 40%;\r\n  width: 40%;\r\n  line-height: 1.2em;\r\n\r\n  @media only screen and (max-width: 450px) {\r\n    font-size: 2.1rem;\r\n  }\r\n`;\r\n\r\nfunction CustomMug({ mugText, mugSrc, color, font }) {\r\n  const [mugcolour, setMugColour] = useState(WhiteMug);\r\n  useEffect(() => {\r\n    if (mugSrc === \"black\") {\r\n      setMugColour(BlackMug);\r\n    } else {\r\n      setMugColour(WhiteMug);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className=\"image-container\">\r\n        <img\r\n          className=\"ui image align-middle\"\r\n          src={mugcolour}\r\n          alt=\"custom mug with text\"\r\n        />\r\n        <div>\r\n          <StyledOverlay style={{ color: color, fontFamily: font }}>\r\n            {mugText}\r\n          </StyledOverlay>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomMug;\r\n",{"ruleId":"122","severity":1,"message":"123","line":5,"column":8,"nodeType":"124","messageId":"125","endLine":5,"endColumn":23},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"122","severity":1,"message":"130","line":17,"column":8,"nodeType":"124","messageId":"125","endLine":17,"endColumn":12},{"ruleId":"122","severity":1,"message":"131","line":10,"column":23,"nodeType":"124","messageId":"125","endLine":10,"endColumn":43},{"ruleId":"122","severity":1,"message":"132","line":54,"column":11,"nodeType":"124","messageId":"125","endLine":54,"endColumn":21},{"ruleId":"122","severity":1,"message":"133","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":26},{"ruleId":"122","severity":1,"message":"134","line":34,"column":9,"nodeType":"124","messageId":"125","endLine":34,"endColumn":17},{"ruleId":"122","severity":1,"message":"135","line":7,"column":7,"nodeType":"124","messageId":"125","endLine":7,"endColumn":14},{"ruleId":"136","severity":1,"message":"137","line":29,"column":3,"nodeType":"124","endLine":29,"endColumn":12,"suggestions":"138"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["139"],"no-negated-in-lhs",["140"],"'Home' is defined but never used.","'UPDATE_CART_QUANTITY' is defined but never used.","'itemInCart' is assigned a value but never used.","'useEffect' is defined but never used.","'onChange' is assigned a value but never used.","'Overlay' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setMugColour'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [mugSrc] as a second argument to the useEffect Hook.",["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},"Add dependencies array: [mugSrc]",{"range":"144","text":"145"},[862,862],", [mugSrc]"]