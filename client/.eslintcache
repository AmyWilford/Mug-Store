
[{"F:\\CodingBootcamp\\Mug-Store\\client\\src\\index.js":"1","F:\\CodingBootcamp\\Mug-Store\\client\\src\\reportWebVitals.js":"2","F:\\CodingBootcamp\\Mug-Store\\client\\src\\App.js":"3","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Home.js":"4","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Signup.js":"5","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Login.js":"6","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\OrderHistory.js":"7","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UserDashboard.js":"8","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Create.js":"9","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\About.js":"10","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\GlobalState.js":"11","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Success.js":"12","F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UpdateUser.js":"13","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Nav.js":"14","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Cart\\index.js":"15","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\queries.js":"16","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\auth.js":"17","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\reducers.js":"18","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\mutations.js":"19","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\UserInfo.js":"20","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\PrevOrder.js":"21","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\helpers.js":"22","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomizeProduct.js":"23","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\actions.js":"24","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CartItem.js":"25","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomMug.js":"26"},{"size":570,"mtime":1669389001013,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1669229350274,"results":"29","hashOfConfig":"28"},{"size":2136,"mtime":1669659108024,"results":"30","hashOfConfig":"28"},{"size":688,"mtime":1669651326501,"results":"31","hashOfConfig":"28"},{"size":4924,"mtime":1669651326505,"results":"32","hashOfConfig":"28"},{"size":2281,"mtime":1669651326502,"results":"33","hashOfConfig":"28"},{"size":1476,"mtime":1669659148878,"results":"34","hashOfConfig":"28"},{"size":1637,"mtime":1669651326509,"results":"35","hashOfConfig":"28"},{"size":445,"mtime":1669651326501,"results":"36","hashOfConfig":"28"},{"size":2441,"mtime":1669651326500,"results":"37","hashOfConfig":"28"},{"size":542,"mtime":1669651326511,"results":"38","hashOfConfig":"28"},{"size":1450,"mtime":1669651326507,"results":"39","hashOfConfig":"28"},{"size":5787,"mtime":1669651326508,"results":"40","hashOfConfig":"28"},{"size":2451,"mtime":1669651592648,"results":"41","hashOfConfig":"28"},{"size":2822,"mtime":1669659206267,"results":"42","hashOfConfig":"28"},{"size":1036,"mtime":1669658382932,"results":"43","hashOfConfig":"28"},{"size":1458,"mtime":1669651326512,"results":"44","hashOfConfig":"28"},{"size":1597,"mtime":1669315339706,"results":"45","hashOfConfig":"28"},{"size":2120,"mtime":1669653953328,"results":"46","hashOfConfig":"28"},{"size":1036,"mtime":1669652090067,"results":"47","hashOfConfig":"28"},{"size":1243,"mtime":1669652090066,"results":"48","hashOfConfig":"28"},{"size":2235,"mtime":1669653542589,"results":"49","hashOfConfig":"28"},{"size":9385,"mtime":1669653861312,"results":"50","hashOfConfig":"28"},{"size":479,"mtime":1669305170537,"results":"51","hashOfConfig":"28"},{"size":2014,"mtime":1669652090063,"results":"52","hashOfConfig":"28"},{"size":1302,"mtime":1669651326490,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"1dxhbal",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"57"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"57"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"57"},"F:\\CodingBootcamp\\Mug-Store\\client\\src\\index.js",["114"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",["115","116"],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\reportWebVitals.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\App.js",["117"],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Home.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Signup.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Login.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\OrderHistory.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UserDashboard.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Create.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\About.js",["118"],"import React from \"react\";\r\n// import '../styles/home.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\n// const Flexcontainer = styled.div`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n// `;\r\n\r\nconst Styleddiv = styled.img`\r\n  box-shadow: 1rem 1rem #fdd846, -1rem -1rem #d5f0f1;\r\n  max-width: 300px;\r\n  margin: 3rem 0 0 1rem;\r\n`;\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container pt-5\">\r\n      <div className=\"row d-flex align-items-center\">\r\n        <div className=\"col-md-7\">\r\n          <h4>Create a gift they'll reach for each day.</h4>\r\n          <p>\r\n            Welcome to Javascript, creating custom mugs that hold your favourite\r\n            memories  within arms reach.\r\n          </p>\r\n          <ul>\r\n            <li>Standard 11-oz capacity mugs</li>\r\n            <li>Your choice of black or white mug</li>\r\n            <li>Personalized syles with custom text, colors, and fonts</li>\r\n            <li>Dishwasher & microwave-safe</li>\r\n            <li>Available in single and bulk orders</li>\r\n          </ul>\r\n          <p>\r\n            Whether you're looking for a unique gift or a treat-yourself moment,\r\n            javascript mugs are quick, simple, and unique.\r\n          </p>\r\n          <div className=\"d-flex flex-wrap flex-row\">\r\n            <Link to=\"/create\">\r\n              <button className=\"rounded yellow ui button m-2\">\r\n                Design A Mug\r\n              </button>\r\n            </Link>\r\n\r\n            <div>\r\n              <Link to=\"/profile\">\r\n                <button className=\"rounded yellow ui button m-2\">\r\n                  Go To Profile\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-5\">\r\n          <div>\r\n            <Styleddiv src=\"./assets/images/paintingmug.jpg\"></Styleddiv>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n{\r\n  /* <div className=\"container d-flex w-50  m-auto mt-5 align-items-center \">\r\n  <Link to=\"/create\">\r\n    {\" \"}\r\n    <S\r\n      className=\" ui image shadow rounded medium m-5\"\r\n      src=\"./assets/images/paintingmug.jpg\"\r\n      alt=\"someone painting on aa mug\"\r\n    />\r\n  </Link>\r\n  <Link to=\"/profile\">\r\n    <button className=\"massive rounded yellow ui button m-2\">\r\n      Go to your dashboard\r\n    </button>\r\n  </Link>\r\n</div>; */\r\n}\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\GlobalState.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\Success.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\pages\\UpdateUser.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Nav.js",["119"],"import React from \"react\";\r\nimport Auth from \"../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Cart from \"./Cart\";\r\n\r\nfunction Nav() {\r\n  function showNavigation() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm  navbar-light bg-light \">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse \" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            {Auth.loggedIn() ? (\r\n              <>\r\n                <li className=\"nav-item\">\r\n                  <button\r\n                    className=\"btn btn-lg btn-outline-danger\"\r\n                    type=\"button\"\r\n                    href=\"/\"\r\n                    onClick={() => Auth.logout()}\r\n                  >\r\n                    Log out\r\n                  </button>\r\n                </li>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <li className=\"nav-item\">\r\n                  <Link to=\"/signup\" className=\"nav-link\">\r\n                    <button\r\n                      className=\"btn btn-lg btn-outline-secondary\"\r\n                      type=\"button\"\r\n                    >\r\n                      Sign up\r\n                    </button>{\" \"}\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link to=\"/login\" className=\"nav-link\">\r\n                    <button\r\n                      className=\"btn btn-lg btn-outline-success\"\r\n                      type=\"button\"\r\n                    >\r\n                      Login\r\n                    </button>{\" \"}\r\n                  </Link>\r\n                </li>\r\n              </>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <header>\r\n      <nav className=\"navbar m-auto navbar-expand-lg shadow  navbar-light bg-light \">\r\n        <Link to=\"/\">\r\n          <img\r\n            className=\"animate__bounceIn \"\r\n            src=\"./assets/images/logo.png\"\r\n            alt=\"logo\"\r\n            height=\"80px\"\r\n          />\r\n        </Link>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\Cart\\index.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\queries.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\auth.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\reducers.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\mutations.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\UserInfo.js",["120"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import Auth from \"../utils/auth\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { QUERY_USER } from \"../utils/queries\";\r\nfunction UserInfo() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n  return (\r\n    <>\r\n      {user ? (\r\n        <>\r\n          <h2>{user.firstName}'s dashboard</h2>\r\n          <h3>Email Address</h3>\r\n          <p>{user.email}</p>\r\n          <h3>Shipping Address</h3>\r\n          <p> {user.address}</p>\r\n          <p>{user.city}</p>\r\n          <p>{user.province}</p>\r\n          <p>{user.country}</p>\r\n        <Link to=\"/updateuser\">  <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            >\r\n            Edit user details\r\n          </button></Link>\r\n        </>\r\n      ) : (\r\n        <Link to=\"/login\">\r\n          <p>Click here to login and see your details</p>\r\n        </Link>\r\n      )}\r\n      </>\r\n  );\r\n}\r\nexport default UserInfo;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\PrevOrder.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\helpers.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomizeProduct.js",["121","122"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_PRODUCT } from '../utils/mutations';\r\nimport { validateCustomText, pluralize } from '../utils/helpers';\r\nimport CustomMug from '../components/CustomMug';\r\nimport { CirclePicker } from 'react-color';\r\n\r\nimport { useStoreContext } from '../utils/GlobalState';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../utils/actions';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction AreProductsSame(product1, product2) {\r\n  console.log('product one:', product1, 'product two', product2);\r\n  if (\r\n    product1 &&\r\n    product2 &&\r\n    product1.mugColor === product2.mugColor &&\r\n    product1.customizedColor === product2.customizedColor &&\r\n    product1.customText === product2.customText &&\r\n    product1.customFont === product2.customFont\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction CustomizeProduct(item) {\r\n  const [blockPickerColor, setBlockPickerColor] = useState('black');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [confirmationMessage, setconfirmationMessage] = useState('');\r\n\r\n  const [newProduct, setNewProduct] = useState({\r\n    mugColor: 'White',\r\n    customizedColor: '',\r\n    customText: '',\r\n    customFont: 'Trebuchet MS',\r\n    count: '',\r\n  });\r\n\r\n  const [addProduct, { error }] = useMutation(ADD_PRODUCT);\r\n  const [mugText, setMugText] = useState('');\r\n  const [mugSrc, setMugSrc] = useState('');\r\n  const [mugFont, setMugFont] = useState('');\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n  const [newButton, setNewButton] = useState('');\r\n\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { cart } = state;\r\n\r\n  const addToCart = async (product) => {\r\n    const itemInCart = cart.find((cartItem) => {\r\n      return AreProductsSame(cartItem, product);\r\n    });\r\n    dispatch({\r\n      type: ADD_TO_CART,\r\n      product: { ...product },\r\n    });\r\n    idbPromise('cart', 'put', { ...product });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === 'mugColor') {\r\n      setNewProduct({ ...newProduct, [name]: value });\r\n      setconfirmationMessage('');\r\n      setMugSrc(value);\r\n    } else if (name === 'customText') {\r\n      if (validateCustomText(value)) {\r\n        setNewProduct({ ...newProduct, [name]: value });\r\n        setMugText(value);\r\n        setCharacterCount(value.length);\r\n      }\r\n    } else if (name === 'customFont') {\r\n      setNewProduct({ ...newProduct, [name]: value });\r\n      setMugFont(value);\r\n    } else if (name === 'count') {\r\n      setNewProduct({ ...newProduct, [name]: parseInt(value) });\r\n    } else {\r\n      setNewProduct({ ...newProduct, customizedColor: blockPickerColor });\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      !newProduct.customText ||\r\n      !newProduct.customizedColor ||\r\n      !newProduct.count\r\n    ) {\r\n      setErrorMessage(\r\n        'Something is missing. Please review and make sure your custom choices have been selected'\r\n      );\r\n    } else {\r\n      try {\r\n        const { data } = await addProduct({\r\n          variables: { ...newProduct },\r\n        });\r\n        setNewButton(' Create a new mug');\r\n        setconfirmationMessage(\r\n          `${newProduct.count} ${pluralize(\r\n            'mug',\r\n            newProduct.count\r\n          )} added to cart.`\r\n        );\r\n        addToCart(data.addProduct);\r\n        let mugselector = document.getElementById('mugselector');\r\n        let fontselector = document.getElementById('fontselector');\r\n        fontselector.value = 'Trebuchet MS';\r\n        mugselector.value = 'white';\r\n        setBlockPickerColor('black');\r\n        setMugSrc('');\r\n        setMugFont('Trebuchet MS');\r\n        setMugText('');\r\n        setErrorMessage('');\r\n        setCharacterCount('0');\r\n        setNewProduct({\r\n          mugColor: 'white',\r\n          customizedColor: '',\r\n          customText: '',\r\n          customFont: '',\r\n          count: '',\r\n        });\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const clearConfirmation = (event) => {\r\n    event.preventDefault();\r\n\r\n    setconfirmationMessage('');\r\n    setNewButton('');\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h3>customize your creation</h3>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-md-5\">\r\n            <form onSubmit={handleFormSubmit} autoComplete=\"off\">\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleFormControlSelect1\">\r\n                  *Pick your mug color (white/black):\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  name=\"mugColor\"\r\n                  id=\"mugselector\"\r\n                  onChange={handleChange}\r\n                  defaultValue=\"1\"\r\n                >\r\n                  <option value=\"white\">White</option>\r\n                  <option value=\"black\">Black</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleInputEmail1\">\r\n                  *Your custom message:\r\n                </label>\r\n                <input\r\n                  name=\"customText\"\r\n                  placeholder=\"I love coffee & tea\"\r\n                  value={newProduct.customText}\r\n                  type=\"text\"\r\n                  className={`form-control ${\r\n                    characterCount === 26 || error ? 'text-danger ' : ''\r\n                  }`}\r\n                  onChange={handleChange}\r\n                />\r\n                <small\r\n                  className={`d-flex justify-content-end ${\r\n                    characterCount === 25 || error ? 'text-danger' : ''\r\n                  }`}\r\n                >\r\n                  max character count: {characterCount}/25\r\n                </small>\r\n              </div>\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleInputEmail1\">\r\n                  *Select a text colour:\r\n                </label>\r\n                <CirclePicker\r\n                  className=\"pt-3 w-100\"\r\n                  name=\"customizedColor\"\r\n                  color={blockPickerColor}\r\n                  onChange={(color) => {\r\n                    setBlockPickerColor(color.hex);\r\n                    setNewProduct({\r\n                      ...newProduct,\r\n                      customizedColor: color.hex,\r\n                    });\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"form-group mt-3\">\r\n                <label htmlFor=\"exampleInputEmail1\">*Select A Font:</label>\r\n                <select\r\n                  id=\"fontselector\"\r\n                  name=\"customFont\"\r\n                  className=\"form-control\"\r\n                  onChange={handleChange}\r\n                  defaultValue=\"1\"\r\n                >\r\n                  <option>Trebuchet MS</option>\r\n                  <option>Amatic SC</option>\r\n                  <option>Bungee Outline</option>\r\n                  <option>Cinzel</option>\r\n                  <option>Cutive Mono</option>\r\n                  <option>Eater</option>\r\n                  <option>Erica One</option>\r\n                  <option>Manrope</option>\r\n                  <option>Monoton</option>\r\n                  <option>Pacifico</option>\r\n                </select>\r\n              </div>\r\n              <div className=\" d-flex flex-row my-2 align-items-end\">\r\n                <div className=\"form-group mt-3\">\r\n                  <label htmlFor=\"exampleInputEmail1\">*Select quantity:</label>\r\n\r\n                  <input\r\n                    className=\"form-control\"\r\n                    placeholder=\"quantity\"\r\n                    value={newProduct.count}\r\n                    name=\"count\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    onChange={handleChange}\r\n                  ></input>\r\n                </div>\r\n                <div>\r\n                  <button className=\"btn btn-warning mx-2\" type=\"submit\">\r\n                    add to cart\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-danger font-italic\">{errorMessage}</p>\r\n                <span>{confirmationMessage}</span>\r\n                <span\r\n                  role=\"button\"\r\n                  className=\"text-primary\"\r\n                  onClick={clearConfirmation}\r\n                >\r\n                  {newButton}\r\n                </span>\r\n              </div>\r\n              {error && (\r\n                <div className=\"text-danger\">\r\n                  Something went wrong. To place an order, make sure you are\r\n                  <Link to=\"/login\"> logged in.</Link>\r\n                </div>\r\n              )}\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-7\">\r\n            <CustomMug\r\n              mugText={mugText}\r\n              mugSrc={mugSrc}\r\n              color={blockPickerColor}\r\n              font={mugFont}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomizeProduct;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\utils\\actions.js",[],"F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CartItem.js",["123","124"],"import React, { useEffect } from 'react';\r\nimport { useStoreContext } from '../utils/GlobalState';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../utils/actions'; //import correct mutations\r\nimport { idbPromise } from '../utils/helpers';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledItem = styled.div`\r\n  font-size: 0.8rem;\r\n  border-bottom: 1px solid grey;\r\n`;\r\nconst Remove = styled.div`\r\n  color: #d5f0f1;\r\n  &:hover {\r\n    color: pink;\r\n  }\r\n`;\r\n\r\nconst CartItem = ({ item }) => {\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = (item) => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id,\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id,\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value),\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <StyledItem key={item._id}>\r\n        <div className=\"row\">\r\n          <div className=\"col-1\">\r\n            <Remove\r\n              role=\"button\"\r\n              aria-label=\"remove\"\r\n              onClick={() => removeFromCart(item)}\r\n            >\r\n              <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n            </Remove>\r\n          </div>\r\n          <div className=\"col-10\">\r\n            <p>\r\n              mug color: {item.mugColor} | text color:\r\n              {item.customizedColor}\r\n            </p>\r\n\r\n            <p>custom message:{item.customText}</p>\r\n            <p>\r\n              price x {item.count} = $ {item.price}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </StyledItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","F:\\CodingBootcamp\\Mug-Store\\client\\src\\components\\CustomMug.js",["125"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./TextOverlay.css\";\r\nimport WhiteMug from \"../assets/whitemug.jpg\";\r\nimport BlackMug from \"../assets/blackmug.jpg\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledOverlay = styled.p`\r\n  display: inline-block;\r\n  flex-wrap: wrap;\r\n  font-size: 2.7rem;\r\n  word-wrap: break-word;\r\n  text-align: center;\r\n  max-width: 400px;\r\n  position: absolute;\r\n  margin-bottom: 0px;\r\n  top: 25%;\r\n  left: 40%;\r\n  width: 40%;\r\n  line-height: 1.2em;\r\n\r\n  @media only screen and (max-width: 450px) {\r\n    font-size: 2.1rem;\r\n  }\r\n`;\r\n\r\nfunction CustomMug({ mugText, mugSrc, color, font }) {\r\n  const [mugcolour, setMugColour] = useState(WhiteMug);\r\n  useEffect(() => {\r\n    if (mugSrc === \"black\") {\r\n      setMugColour(BlackMug);\r\n    } else {\r\n      setMugColour(WhiteMug);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className=\"image-container\">\r\n        <img\r\n          className=\"ui image align-middle\"\r\n          src={mugcolour}\r\n          alt=\"custom mug with text\"\r\n        />\r\n        <div>\r\n          <StyledOverlay style={{ color: color, fontFamily: font }}>\r\n            {mugText}\r\n          </StyledOverlay>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomMug;\r\n",{"ruleId":"126","severity":1,"message":"127","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":23},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"126","severity":1,"message":"134","line":22,"column":8,"nodeType":"128","messageId":"129","endLine":22,"endColumn":13},{"ruleId":"135","severity":1,"message":"136","line":67,"column":1,"nodeType":"137","messageId":"138","endLine":83,"endColumn":2},{"ruleId":"126","severity":1,"message":"139","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":12},{"ruleId":"126","severity":1,"message":"140","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"141","line":10,"column":23,"nodeType":"128","messageId":"129","endLine":10,"endColumn":43},{"ruleId":"126","severity":1,"message":"142","line":54,"column":11,"nodeType":"128","messageId":"129","endLine":54,"endColumn":21},{"ruleId":"126","severity":1,"message":"143","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":26},{"ruleId":"126","severity":1,"message":"144","line":29,"column":9,"nodeType":"128","messageId":"129","endLine":29,"endColumn":17},{"ruleId":"145","severity":1,"message":"146","line":28,"column":3,"nodeType":"128","endLine":28,"endColumn":12,"suggestions":"147"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"'About' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Cart' is defined but never used.","'useState' is defined but never used.","'UPDATE_CART_QUANTITY' is defined but never used.","'itemInCart' is assigned a value but never used.","'useEffect' is defined but never used.","'onChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setMugColour'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [mugSrc] as a second argument to the useEffect Hook.",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},"Add dependencies array: [mugSrc]",{"range":"153","text":"154"},[838,838],", [mugSrc]"]
